<?xml version="1.0" encoding="UTF-8"?>
<keywordspec name="SeleniumLibrary.locators.windowmanager" type="LIBRARY" format="ROBOT" scope="GLOBAL" namedargs="true" generated="2022-11-23T07:47:01Z" specversion="2" source="C:\Users\EICPL02-L69\AppData\Local\Programs\Python\Python311\Lib\site-packages\SeleniumLibrary\locators\windowmanager.py" lineno="1">
<version />
<scope>global</scope>
<namedargs>yes</namedargs>
<doc>Documentation for library ``SeleniumLibrary.locators.windowmanager``.</doc>
<kw name="Is String" source="C:\Users\EICPL02-L69\AppData\Local\Programs\Python\Python311\Lib\site-packages\robot\utils\robottypes3.py" lineno="41">
<arguments>
<arg>item</arg>
</arguments>
<doc />
</kw>
<kw name="Namedtuple" source="C:\Users\EICPL02-L69\AppData\Local\Programs\Python\Python311\Lib\collections\__init__.py" lineno="348">
<arguments>
<arg>typename</arg>
<arg>field_names</arg>
<arg>*</arg>
<arg>rename=False</arg>
<arg>defaults=None</arg>
<arg>module=None</arg>
</arguments>
<doc>Returns a new subclass of tuple with named fields.

&gt;&gt;&gt; Point = namedtuple('Point', ['x', 'y'])
&gt;&gt;&gt; Point.__doc__                   # docstring for the new class
'Point(x, y)'
&gt;&gt;&gt; p = Point(11, y=22)             # instantiate with positional args or keywords
&gt;&gt;&gt; p[0] + p[1]                     # indexable like a plain tuple
33
&gt;&gt;&gt; x, y = p                        # unpack like a regular tuple
&gt;&gt;&gt; x, y
(11, 22)
&gt;&gt;&gt; p.x + p.y                       # fields also accessible by name
33
&gt;&gt;&gt; d = p._asdict()                 # convert to a dictionary
&gt;&gt;&gt; d['x']
11
&gt;&gt;&gt; Point(**d)                      # convert from a dictionary
Point(x=11, y=22)
&gt;&gt;&gt; p._replace(x=100)               # _replace() is like str.replace() but targets named fields
Point(x=100, y=22)</doc>
</kw>
</keywordspec>